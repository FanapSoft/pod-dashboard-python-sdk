# coding=utf-8
from __future__ import unicode_literals

import io
import json
import struct
import zipfile
from os import path
from sys import version_info

import requests
from pod_base import PodBase, ConfigException

from .exceptions import DashboardException

try:
    import urllib.parse as urllib
except ImportError:
    import urllib


class PodDashboard(PodBase):
    __slots__ = "__raw_response"

    def __init__(self, api_token, token_issuer="1", server_type="sandbox", config_path=None,
                 sc_api_key="", sc_voucher_hash=None):
        here = path.abspath(path.dirname(__file__))
        self.__raw_response = None
        self._services_file_path = path.join(here, "services.json")
        super(PodDashboard, self).__init__(api_token, token_issuer, server_type, config_path, sc_api_key,
                                           sc_voucher_hash, path.join(here, "json_schema.json"))

    def __get_private_call_address(self):
        """
        دریافت آدرس سرور پرداخت از فایل کانفیگ

        :return: str
        :raises: :class:`ConfigException`
        """
        private_call_address = self.config.get("private_call_address", self._server_type)
        if private_call_address:
            return private_call_address

        raise ConfigException("config `private_call_address` in {} not found".format(self._server_type))

    def _get_headers(self):
        headers = super(PodDashboard, self)._get_headers()
        headers["token"] = self._api_token
        return headers

    def create_dashboard(self, name, order=None, config=None, **kwargs):
        """
        ایجاد داشبورد

        :param str name: نام
        :param int|None order: مکان قرارگیری میان لیست داشبوردها
        :param dict|None config: تنظیمات داشبورد

        :return: int
        """
        data = {
            "name": name
        }
        if order is not None:
            data["order"] = order
        if config is not None:
            data["config"] = config

        self._validate(data, "createDashboard")
        if config is not None:
            data["config"] = json.dumps(config)

        data = {
            "content": json.dumps(data)
        }
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard", method_type="post"), params=data,
            headers=self._get_headers(), internal=False, **kwargs))

    def get_user_dashboards(self, page=0, size=10, **kwargs):
        """
        لیست داشبوردهای کاربر

        :param int page: شماره صفحه
        :param int size: تعداد رکورد در هر صفحه
        :return: dict
        """
        kwargs["page"] = page
        kwargs["size"] = size
        self._validate(kwargs, "getUserDashboards")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def get_all_dashboards(self, page=0, size=10, **kwargs):
        """
        تمام داشبوردهای قابل مشاهده توسط کاربر

        :param int page: شماره صفحه
        :param int size: تعداد رکورد در هر صفحه
        :return: dict
        """
        kwargs["page"] = page
        kwargs["size"] = size

        self._validate(kwargs, "getAllDashboards")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard/all"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def update_dashboard(self, dashboard_id, name, order=None, config=None, **kwargs):
        """
        ویرایش داشبورد

        :param int dashboard_id: شناسه داشبورد
        :param str name: نام
        :param int|None order: مکان قرارگیری میان لیست داشبوردها
        :param dict|None config: تنظیمات داشبورد

        :return: int
        """
        data = {
            "name": name,
            "dashboard_id": dashboard_id
        }

        if order is not None:
            data["order"] = order
        if config is not None:
            data["config"] = config

        self._validate(data, "updateDashboard")
        if config is not None:
            data["config"] = json.dumps(config)

        del data["dashboard_id"]

        data = {
            "content": json.dumps(data),
            "id": dashboard_id
        }
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard", method_type="put"), params=data,
            headers=self._get_headers(), internal=False, **kwargs))

    def remove_dashboard(self, dashboard_id, **kwargs):
        """
        حذف داشبورد

        :param int dashboard_id: شناسه داشبورد

        :return: int
        """
        self._validate({"dashboard_id": dashboard_id}, "removeDashboard")

        data = {
            "id": dashboard_id
        }
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard", method_type="delete"), params=data,
            headers=self._get_headers(), internal=False, **kwargs))

    def get_all_collaborator_reports(self, name=None, page=0, size=10, **kwargs):
        """
        مشاهده همه گزارشات در دسترس

        :param str|None name: نام گزارش
        :param int page: شماره صفحه
        :param int size: تعداد رکورد در هر صفحه
        :return: dict
        """
        kwargs["page"] = page
        kwargs["size"] = size
        kwargs["name"] = name
        kwargs = self.__remove_empty_items(kwargs)
        self._validate(kwargs, "getAllCollaboratorReports")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/report/CollaboratorReports"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def get_collaborator_report(self, report_id, **kwargs):
        """
        مشاهده یک گزارش در دسترس با شناسه

        :param int report_id: شناسه گزارش
        :return: dict
        """

        self._validate({"report_id": report_id}, "getCollaboratorReport")
        kwargs["id"] = report_id
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/report/CollaboratorReport/{id}"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def add_user_param(self, report_id, dashboard_id, name=None, params=None, **kwargs):
        """
        ایجاد یک نمونه از گزارش در داشبورد کاربر

        :param int report_id: شناسه گزارش
        :param int dashboard_id: شناسه داشبورد
        :param str|None name: نام
        :param list|None params: لیست پارامترهای گزارش

        :return: int
        """

        if name is None:
            name = ""

        if params is None:
            params = []

        data = {
            "report_id": report_id,
            "dashboard_id": dashboard_id,
            "name": name,
            "params": params
        }

        self._validate(data, "addUserParam")

        if version_info[0] == 2:
            name = urllib.quote(name.encode("utf-8"))
        else:
            name = urllib.quote(name)

        data = {
            "id": report_id,
            "dashboardId": dashboard_id,
            "name": name,
            "content": json.dumps(params)
        }

        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/report/{id}/param", method_type="post"),
            params=data, headers=self._get_headers(), internal=False, **kwargs))

    def add_drill_down_user_param(self, report_id, user_report_id, params=None, **kwargs):
        """
        ایجاد یک نمونه از زیر گزارش

        :param int report_id: شناسه گزارش
        :param int user_report_id: شناسه گزارش کاربر
        :param list|None params: لیست پارامترهای گزارش

        :return: int
        """

        if params is None:
            params = []

        data = {
            "report_id": report_id,
            "user_report_id": user_report_id,
            "params": params
        }

        self._validate(data, "addDrillDownUserParam")

        data = {
            "id": report_id,
            "userReportId": user_report_id,
            "content": json.dumps(params)
        }

        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/report/{id}/userreport/{userReportId}/param",
                                                               method_type="post"),
            params=data, headers=self._get_headers(), internal=False, **kwargs))

    def get_all_user_reports(self, page=0, size=10, **kwargs):
        """
        مشاهده همه گزارش های کاربر

        :param int page: شماره صفحه
        :param int size: تعداد رکورد در هر صفحه
        :return: dict
        """
        kwargs["page"] = page
        kwargs["size"] = size

        self._validate(kwargs, "getAllUserReports")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/userreport"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def get_user_report(self, user_report_id, **kwargs):
        """
        مشاهده گزارش کاربر با شناسه

        :param int user_report_id: شماره گزارش کاربر
        :return: dict
        """
        kwargs["id"] = user_report_id

        self._validate({"user_report_id": user_report_id}, "getUserReport")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/userreport/{id}"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def execute_user_report(self, user_report_id, page=0, size=10, load_from_cache=True, execute_params=None, **kwargs):
        """
        مشاهده گزارش کاربر با شناسه

        :param int user_report_id: شماره گزارش کاربر
        :param int page: شماره صفحه
        :param int size: تعداد رکورد برگشتی
        :param bool load_from_cache: خروجی از کش بارگذاری شود یا مجددا کوئری اجرا شود؟
        :param dict execute_params: اطلاعات لازم برای اجرای گزارش
        :return: dict
        """
        kwargs["user_report_id"] = user_report_id
        kwargs["userReportId"] = user_report_id
        kwargs["loadFromCache"] = load_from_cache
        kwargs["execute_params"] = execute_params
        kwargs["page"] = page
        kwargs["size"] = size
        return self.__execute_user_report(url="exec", schema_name="executeUserReport", **kwargs)

    def get_xls(self, user_report_id, page=0, size=10, callback_url=None, force_save=False, execute_params=None,
                save_to=None, **kwargs):
        """
        دریافت خروجی اکسل گزارش

        :param int user_report_id: شماره گزارش کاربر
        :param int page: شماره صفحه
        :param int size: تعداد رکورد برگشتی
        :param str callback_url: آدرس کال بک، این آدرس پس از ایجاد خروجی فراخوانی می شود
        :param bool force_save: آیا خروجی حتما در پاد اسپیس ذخیره شود؟
        :param dict execute_params: اطلاعات لازم برای اجرای گزارش
        :param str save_to: آدرس محل ذخیره سازی خروجی
        :return: dict
        """
        # d = zipfile.ZipFile("/tmp/aaa.zip")
        # struct.pack()
        # print(d)
        # with open(save_to, "w") as f:
        #     f.write()
        #
        # return True
        r = requests.post("http://91.208.165.84/dashboard5/v1/userreport/715/getXLS", headers={
            "token": self._api_token,
            "Content-Type": "application/json"
        }, json=self.__default_params())

        data = r.content
        data2 = b'PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u000B\\u0000\\u0000\\u0000_rels/.rels\xef\xbf\xbd\xef\xbf\xbdMj\\u00031\\fF\xef\xbf\xbdb\xef\xbf\xbd\xef\xbf\xbdh\xef\xbf\xbdB)%N6\xef\xbf\xbd\xef\xbf\xbd])\xef\xbf\xbd\\u0001T[\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdX\xef\xbf\xbdV\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd5]\xef\xbf\xbd\\u000E\xef\xbf\xbdI\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u000F\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdi4_\xef\xbf\xbdr/\xef\xbf\xbd\xc2\xb2\xef\xbf\xbd\xef\xbf\xbdpp\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdZx?\xef\xbf\xbd,\xef\xbf\xbd\xef\xbf\xbdd\xef\xbf\xbd\xef\xbf\xbdi\xef\xbf\xbd\xef\xbf\xbd\\u0016N\xef\xbf\xbda\xef\xbf\xbdY\xef\xbf\xbd\xef\xbf\xbdHZ\xef\xbf\xbd\xe4\xae\x8f\xef\xbf\xbd\\u0014F\xef\xbf\xbd\\u0016:\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd]\xef\xbf\xbd\\u0013\xef\xbf\xbdJ\\"\xef\xbf\xbd\xef\xbf\xbdi$M\xef\xbf\xbd\xef\xbf\xbdZ\xef\xbf\xbd\xef\xbf\xbd\\u0006j\\u0019Wu\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd/\\u0003\xef\xbf\xbdL\xef\xbf\xbd\xef\xbf\xbd\\u0016\xef\xbf\xbd\xef\xbf\xbd/\xef\xbf\xbd\\u001CN\xef\xbf\xbd\xef\xbf\xbd\xcd\x96\xef\xbf\xbd\xef\xbf\xbd\\u001D\xef\xbf\xbd\xef\xbf\xbd}N\\u001C\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdO\\u00142\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdq\xef\xbf\xbdoI\xc3\x87\xef\xbf\xbdP\\u0015a0xYfu\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u000F\xc5\x89\xef\xbf\xbd<)\xef\xbf\xbd\xef\xbf\xbd\xc4\x8b\xef\xbf\xbdJLI\xef\xbf\xbd\\u0012\xef\xbf\xbd\xef\xbf\xbd\xc7\x8b{-\xef\xbf\xbd\xef\xbf\xbd;q\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd~\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdQ9x\xef\xbf\xbd\xd7\x9d(\xc6\xb3\\u0012\xce\xbe\xef\xbf\xbd\xef\xbf\xbd\\u0007PK\\u0007\\bd\xef\xbf\xbd\xef\xbf\xbd(\xef\xbf\xbd\\u0000\\u0000\\u0000M\\u0002\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0011\\u0000\\u0000\\u0000docProps/core.xmlm\xef\xbf\xbd\xef\xbf\xbdN\xef\xbf\xbd0\\u0010E\x7f%\xef\xbf\xbdq\\u0003\\u0012BQ\xef\xbf\xbdJ,XQ\\t\xef\xbf\xbdEbk\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd4~\xef\xbf\xbd3!\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd!T\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdyT\xdb\x8bm\xef\xbf\xbd/\xef\xbf\xbdd\xef\xbf\xbd\xef\xbf\xbdE\xef\xbf\xbd\xef\xbf\xbdE\xef\xbf\xbd\\u000E\xef\xbf\xbd6\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdy\xef\xbf\xbd(2b\xef\xbf\xbdj\xef\xbf\xbd\xef\xbf\xbdZ\\fHb\xef\xbf\xbd\xef\xbf\xbd \xef\xbf\xbd\xef\xbf\xbd#\xef\xbf\xbdF\\u001F0\xef\xbf\xbdA\xef\xbf\xbd\\u0012\xef\xbf\xbdQ\\t\xef\xbf\xbd\\u0016\'\xef\xbf\xbdPJIpB\xef\xbf\xbd(O\\t\xef\xbf\xbd\xcc\xa3\xef\xbf\xbdVq\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdA\xef\xbf\xbdY5(\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0007i\xef\xbf\xbd\xef\xbf\xbdV\xef\xbf\xbd\xef\xbf\xbd\\b\\\\\xef\xbf\xbd\xef\xbf\xbd(f\xef\xbf\xbd\xef\xbf\xbd\\u0005\\u0019\xef\xbf\xbd\xef\xbf\xbdN\\u0000\\u0012[\xef\xbf\xbd\xef\xbf\xbdd\xef\xbf\xbd\\u0017\xef\xbf\xbd7\xef\xbf\xbd\\u0018-\xef\xbf\xbd\xef\xbf\xbdarn\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0010\xef\xbf\xbdDs\xef\xbf\xbd\xef\xbf\xbdlWsI_\xef\xbf\xbd,\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd~j#\xef\xbf\xbd_\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd~\\u001Aue\xdc\xb8)@\xef\xbf\xbd\xef\xbf\xbd4\xef\xbf\xbdl\xef\xbf\xbd\xef\xbf\xbdLNo\xef\xbf\xbd>>\\u0011xV\\u0010Q\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdJ{<\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdi65\\u0012D\\u00138\xef\xbf\xbdc\\u000E\xef\xbf\xbd\xef\xbf\xbdx\xef\xbf\xbd.r4\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\b\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdq\xef\xbf\xbd\xef\xbf\xbdq\xef\xbf\xbd\xef\xbf\xbd!M\xef\xbf\xbd\\u0013\xef\xbf\xbdV\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd6\xef\xbf\xbdPK\\u0007\\b\xc3\x9d\x7fv\\u001E\\u0001\\u0000\\u0000\xef\xbf\xbd\\u0001\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000docProps/app.xml\xef\xbf\xbd\xef\xbf\xbdAK\\u00031\\u0010\xef\xbf\xbd\xef\xbf\xbdJ\xc8\xbd\xef\xbf\xbdTE\xef\xbf\xbddSD\xef\xbf\xbd&\\b\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbddv\\u001B\xef\xbf\xbd\xcc\x84dZ\xef\xbf\xbd\xef\xbf\xbd\xde\xac\\u0005\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd{\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd1\xef\xbf\xbdK\xef\xbf\xbd\xef\xbf\xbd\\u0019J\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdvZ@O!\xef\xbf\xbd\xef\xbf\xbd\xcb\xaf\xef\xbf\xbdm\xef\xbf\xbd$Ee\xef\xbf\xbd\xef\xbf\xbd\xcd\x84\xef\xbf\xbd\xef\xbf\xbd\\u0005\xef\xbf\xbd\xef\xbf\xbd[\xef\xbf\xbdQ(C\xef\xbf\xbd\\bU4\\u0000\xef\xbf\xbd^\\u001E\xef\xbf\xbd\xef\xbf\xbdN\xef\xbf\xbd\xea\x8f\x90\\\\\xef\xbf\xbdZ\xef\xbf\xbd-\\u0019\xef\xbf\xbd$\xef\xbf\xbd\xcd\x96I\xef\xbf\xbd8F\\u000F\xef\xbf\xbd\xef\xbf\xbdO\\t\xef\xbf\xbd\xd5\x9d\xd6\x8f.\\f\\u0018 l\xef\xbf\xbd/P^\xef\xbf\xbd\xef\xbf\xbd3\xef\xbf\xbd\\u0017\\u001A\xc8\xaf\xef\xbf\xbd\xef\xbf\xbdaXr\xef\xbf\xbdk\xef\xbf\xbds\xef\xbf\xbds\xef\xbf\xbd\xef\xbf\xbdF\xef\xbf\xbd~\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdn\\u001F:}\xef\xbf\xbd\xef\xbf\xbdQ77\xef\xbf\xbd*~\xef\xbf\xbd?\xef\xbf\xbd\xc8\x8bm\xd1\xad5\\u0003\xef\xbf\xbd<;\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdMPV\xef\xbf\xbdB);\\\\V\xef\xbf\xbd\xef\xbf\xbd~c\xef\xbf\xbd\\u0001PK\\u0007\\bKPUX\xef\xbf\xbd\\u0000\\u0000\\u0000_\\u0001\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u000F\\u0000\\u0000\\u0000xl/workbook.xml\xef\xbf\xbdQ\xef\xbf\xbdn\xef\xbf\xbd0\\u0010\xef\xbf\xbd\\u0015k\xef\xbf\xbd\xef\xbf\xbd!\xef\xbf\xbdU\xef\xbf\xbd\\bH}\xef\xbf\xbdHU[\xef\xbf\xbd\\u0014\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0010\\u000B\xc7\x8el\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdw\xef\xbf\xbd\\b\xef\xbf\xbd\xef\xbf\xbdz\xef\xbf\xbd\xef\xbf\xbd>fv\xd6\xb3\xc5\xb16\xef\xbf\xbd>hg\\u000B\\u0018\xef\xbf\xbd2`h\xef\xbf\xbdS\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd^\xef\xbf\xbd\\\\\xef\xbf\xbd\\u0001\\u000BQX%\xef\xbf\xbd\xef\xbf\xbdX\xef\xbf\xbd\\t\\u0003,\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xd6\xb9=\xef\xbf\xbdq\\u001B\xef\xbf\xbdbl\xef\xbf\xbd\xef\xbf\xbd\\u0007Ya-\xef\xbf\xbd\xef\xbf\xbd5h\xef\xbf\xbdR:_\xef\xbf\xbdH\xef\xbf\xbd\xef\xbf\xbdxh<\\u0015*\xef\xbf\xbdX\\u001B\xef\xbf\xbdg\xef\xbf\xbd-\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd00L\xef\xbf\xbd\x7f8\\\\Yj\xef\xbf\xbdON\xef\xbf\xbd5\xef\xbf\xbd8\xef\xbf\xbdx4\\"\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdM\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0006\xd7\x83\\u001F&\xef\xbf\xbd\xef\xbf\xbd]\xd4\xb4\xef\xbf\xbd\xef\xbf\xbd\\u00003\\"\xef\xbf\xbdg\xef\xbf\xbd#\xef\xbf\xbd\\u0002&\\u0004]\xef\xbf\xbd\x7f\\u0012\xef\xbf\xbdm\\u001EZm\xef\xbf\xbdz\x7f\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdO(\xef\xbf\xbd]k\xef\xbf\xbd\xc2\xa5\xef\xbf\xbd ;n\xef\xbf\xbdU\xef\xbf\xbd+ \xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdNg4\xef\xbf\xbd\\tu}i\xef\xbf\xbdU\xef\xbf\xbd\xe8\xba\x93\xef\xbf\xbd\xef\xbf\xbd1\xef\xbf\xbd^Q\xef\xbf\xbdHby~\\u0003L\xc8\xa8\\u000F\xef\xbf\xbd\\u0012\xef\xbf\xbd\\u0002\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd/\xef\xbf\xbd\xef\xbf\xbdh\xef\xbf\xbd\xda\xbf\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdR<\xef\xbf\xbd\xef\xbf\xbdI\xef\x92\x96\xef\xbf\xbd\xef\xbf\xbdO5\\u0005~\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdyNa\xef\xbf\xbd-\xef\xbf\xbdt\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd0\xef\xbf\xbd,\xef\xbf\xbd\xef\xbf\xbd1\xef\xbf\xbd\\u0014~\xef\xbf\xbd7\'\\u0006\xef\xbf\xbd$|\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u000FPK\\u0007\\b\xef\xbf\xbd\\u0013_\xef\xbf\xbdD\\u0001\\u0000\\u0000\\u001C\\u0002\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0018\\u0000\\u0000\\u0000xl/worksheets/sheet1.xml\xef\xbf\xbd\xef\xbf\xbdmo\xef\xbf\xbd0\\u0010\xc7\xbf\xef\xbf\xbd}CL\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdP\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdM\xda\xa4i\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0001\xef\xbf\xbd\xef\xbf\xbd\\u0002F\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd~g\xef\xbf\xbd\xef\xbf\xbd1\xef\xbf\xbd\xef\xbf\xbd\\u000E\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd%\xef\xbf\xbd\xef\xbf\xbdu\xef\xbf\xbd\\t\xef\xbf\xbd%mv.Z,]\xef\xbf\xbd4\\u0019\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbds\xef\xbf\xbd\xef\xbf\xbdy\xef\xbf\xbd\xdb\xb8\\u000E\\u0017\xef\xbf\xbd\xef\xbf\xbdqE\\u001B\xef\xbf\xbds\xef\xbf\xbd\\bw\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdB\xef\xbf\xbd\\u000B?\\u0012\\"\\u001Cx\xef\xbf\xbd\xef\xbf\xbd;\xef\xbf\xbd(D\xef\xbf\xbd\xef\xbf\xbd<\xef\xbf\xbd\\u001DI\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0001KAY\xef\xbf\xbd\\u0005\xdc\xb2\xef\xbf\xbd\xef\xbf\xbd[Fp\xef\xbf\xbd^\xef\xbf\xbd+\xef\xbf\xbd_.#\xef\xbf\xbd\xef\xbf\xbde\xef\xbf\xbdj\xc2\x96}\xef\xbf\xbdA\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd#\xef\xbf\xbdN5i\xef\xbf\xbd\xef\xbf\xbd0Ra\\u0001\xef\xbf\xbd\xef\xbf\xbdc\xef\xbf\xbd\xef\xbf\xbd\\u000F\xef\xbf\xbdk\xef\xbf\xbd)^\xef\xbf\xbd\xef\xbf\xbd\\u0005N\xef\xbf\xbd\\u0011\xef\xbf\xbd \xef\xbf\xbdGm\xef\xbf\xbdx(\xef\xbf\xbd\xef\xbf\xbdW\xef\xbf\xbd\\u0019\xef\xbf\xbd\xef\xbf\xbd\\u0016b\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xd3\xa1\xef\xbf\xbdO\\u0019{\xef\xbf\xbd\xef\xbf\xbdu6\\u0003]IV\xef\xbf\xbd\xef\xbf\xbd\xcb\xa9\xef\xbf\xbd\\u0003p\\u000B\xef\xbf\xbd\xdb\x97U)\xef\xbf\xbd\xef\xbf\xbdq\xef\xbf\xbd4\xef\xbf\xbdK8\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdH\xef\xbf\xbds\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u001F\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd&*\xef\xbf\xbd\xef\xbf\xbdJr\xef\xbf\xbdkG\xef\xbf\xbd\xef\xbf\xbd3\xef\xbf\xbdH&H\\u000E\\u0015v\\u001DY\xef\xbf\xbd=\xef\xbf\xbd/\xef\xbf\xbd\xef\xbf\xbd;<\xef\xbf\xbd\xef\xbf\xbd\\u000B\xef\xbf\xbd\xef\xbf\xbd \xef\xbf\xbd\xef\xbf\xbdJ\xef\xbf\xbdJ\\u0002\\u0015\xcc\x9b\xd1\x9eT5\x7f1\'\'\\u0005>U\xef\xbf\xbd7\xef\xbf\xbd|#\xef\xbf\xbd\xef\xbf\xbd(\\u0000\xef\xbf\xbd\\u0016\xef\xbf\xbd\\u0018\\u001E\xef\xbf\xbd\xef\xbf\xbdi\xef\xbf\xbd\xef\xbf\xbd\xc5\x812\\u0000\xef\xbf\xbd\xef\xbf\xbdX6\\t\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xd3\xbb\xef\xbf\xbdI&\xef\xbf\xbd\xef\xbf\xbd{\xef\xbf\xbd\xef\xbf\xbdp\xef\xbf\xbds\xef\xbf\xbdL\xef\xbf\xbd3|;{\xef\xbf\xbd=\\fm\xef\xbf\xbd\xef\xbf\xbdy\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0007\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdO\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xca\x8f\xef\xbf\xbd\xef\xbf\xbdW668t\xef\xbf\xbd\xd5\x84\xef\xbf\xbdRl\x7fe`\\u0007668t\xef\xbf\xbd`\xef\xbf\xbd\\u000E\\u0014\\u001B\xef\xbf\xbd\xef\xbf\xbd\\u0019\xef\xbf\xbd\\u0004\xef\xbf\xbd\xef\xbf\xbdvJ\xef\xbf\xbd\xef\xbf\xbdC\xef\xbf\xbd\\u0013t\xef\xbf\xbd\xef\xbf\xbdQ\xef\xbf\xbdx\xef\xbf\xbd\xef\xbf\xbdlhp\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0004-\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xc6\x86B\xef\xbf\xbdmhp\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\tz\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdM\\u0018\xef\xbf\xbd-4\\\\\\u000E\xef\xbf\xbd\xef\xbf\xbdm\\b\\u000E\\u001D}3\xef\xbf\xbdot\xef\xbf\xbdQ\\u001C\\u001A\xe8\xb1\x8d\\u000E\\u000E\\u001D\xef\xbf\xbdo\\b%\xef\xbf\xbd\xef\xbf\xbdX7\xef\xbf\xbd!-\\b\\u0004z;r\xef\xbf\xbda\xef\xbf\xbdp0\xef\xbf\xbd\xcc\x84}\\u0007\xef\xbf\xbd\xd2\x82\xef\xbf\xbd\xef\xbf\xbd\\u001Cip&P\xef\xbf\xbdS\\u0013\\u0006\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdDC\xef\xbf\xbdN\xef\xbf\xbdFU\xef\xbf\xbd\\b!\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdU\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd(S0*-m\\f:EV\xef\xbf\xbdJ\\u000F\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdd*\xef\xbf\xbdU\xef\xbf\xbdh\xef\xbf\xbdV\xd4\xa7Y7\\u000FXU\xef\xbf\xbdk\\u0013\xdf\xaaX4\xef\xbf\xbd\xef\xbf\xbdt\xd0\x80Qg\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdDV\xef\xbf\xbdJ\\u000F\xef\xbf\xbd@\\u0000\xef\xbf\xbd\xef\xbf\xbd\xe6\xb4\x8a\\u0016U;\xcf\x8d\xef\xbf\xbdm\xef\xbf\xbdO\xef\xbf\xbdq\xef\xbf\xbd[U\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdE\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdEq\xef\xbf\xbd\xcf\x8b\xef\xbf\xbd\xef\xbf\xbd*]\x7f(\xef\xbf\xbd\xef\xbf\xbd\\\\\\u0000\xef\xbf\xbd\xef\xbf\xbdN`\\u0018\xc5\xbeU\xef\xbf\xbd\xd2\xa3\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdg\xef\xbf\xbd;\\u0007\xef\xbf\xbdJZ\xef\xbf\xbd+\xef\xbf\xbd[u+=\xef\xbf\xbd\\u0013\\u0013\xef\xbf\xbd\xef\xbf\xbdo\xef\xbf\xbd!2d\xdf\xb7\xef\xbf\xbdVz\xef\xbf\xbd\\b_\xef\xbf\xbd62\xef\xbf\xbdo\xef\xbf\xbd\xef\xbf\xbd?\xef\xbf\xbd\xef\xbf\xbd \xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdh\xef\xbf\xbd\\u001AT%\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdCYz\xef\xbf\xbd\xef\xbf\xbdOw\\u0003\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdLs\xef\xbf\xbd\xef\xbf\xbd.\xef\xbf\xbd?\xef\xbf\xbd\xef\xbf\xbd@~bv(\\u001B\xef\xbf\xbdT\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdX\\u0003\xef\xbf\xbd\xef\xbf\xbdK\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdV\xef\xbf\xbd=\\u0015\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\b{6\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdr\\u0001\xef\xbf\xbd\\u0005\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdNB\xef\xbf\xbd\xef\xbf\xbd8\xef\xbf\xbd\\u000Ee%,\xef\xbf\xbdjw\xde\xb9-e\xef\xbf\xbd\xef\xbf\xbdR\xef\xbf\xbd\xd5\xaf[\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdPK\\u0007\\b\xef\xbf\xbd\xef\xbf\xbd;\xef\xbf\xbd/\\u0003\\u0000\\u0000!\\f\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000xl/styles.xml\xef\xbf\xbdX\xef\xbf\xbdo\xef\xbf\xbd0\\u0010\xef\xbf\xbdW\\u0010\xef\xbf\xbd+$t\xef\xbf\xbdL\xef\xbf\xbd\xef\xbf\xbdCB\xef\xbf\xbdKU\xef\xbf\xbd\xef\xbf\xbd4i\xda\x83\\u0013\\fA262N\\u0015\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd@\xef\xbf\xbd\xef\xbf\xbd\\\\\xef\xbf\xbdU\xef\xbf\xbd\xef\xbf\xbdiq\\u001E\xef\xbf\xbd\xef\xbf\xbdw\xef\xbf\xbd\xef\xbf\xbd:\'\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdy\xe4\xba\xad\xef\xbf\xbd\\\\\xef\xbf\xbd\xef\xbf\xbd\\u000B\xef\xbf\xbdu\xef\xbf\xbd\\\\\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdr\xef\xbf\xbd\xef\xbf\xbd0\xef\xbf\xbd3\xef\xbf\xbd$_\xef\xbf\xbd\\u001Do\xef\xbf\xbd\xef\xbf\xbd$nM\'\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbds\xef\xbf\xbd\\u0002\xef\xbf\xbd.\xdc\xb51\xef\xbf\xbd{\xef\xbf\xbdkWk^\xef\xbf\xbd\xef\xbf\xbdB5\\\\\\u0002R(]3\\u0003C]zm\xef\xbf\xbd9\xef\xbf\xbd[\\u0014\xef\xbf\xbd\xef\xbf\xbd7\xef\xbf\xbd\xef\xbf\xbd\xd0\xabY%\xef\xbf\xbd$.\xef\xbf\xbd4\xef\xbf\xbd\xef\xbf\xbdR\\u001Bi\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0000F\xef\xbf\xbd9\xef\xbf\xbdL\\u0000\\u0005\xef\xbf\xbd\xef\xbf\xbdx\xef\xbf\xbd\xef\xbf\xbd\xd2\x8e\\u0001\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xcc\x92$\xef\xbf\xbdy\xef\xbf\xbds\xef\xbf\xbd+&,\xef\xbf\xbd`u%\xef\xbf\xbd\xef\xbf\xbd:\xef\xbf\xbd\\u0014\\u000F\xef\xbf\xbd\\u000F\xef\xbf\xbd\\u0016\\u0018*!v\xef\xbf\xbd\xef\xbf\xbdh\\bI\xef\xbf\xbd0c\xef\xbf\xbd\xef\xbf\xbd\\u0019\\fz!K}\xef\xbf\xbd|\\u000F]\\u0003n\xef\xbf\xbd\xef\xbf\xbdu\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd$^*\xef\xbf\xbdC^\\u000F\xef\xbf\xbd\xef\xbf\xbdII,xa\xd0\x86\xef\xbf\xbd\xca\xb5\xef\xbf\xbd\\u0018\xef\xbf\xbd\xef\xbf\xbdg\xef\xbf\xbd\xef\xbf\xbdQ5\xef\xbf\xbd\xef\xbf\xbdJ\xef\xbf\xbd\xde\x93Q\xef\xbf\xbd\\u001BTB*\xef\xbf\xbd\\u0010\xef\xbf\xbd8\\u0005\xef\xbf\xbd\xef\xbf\xbd}$>\xef\xbf\xbd\xef\xbf\xbd-\\u001C\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd|\xef\xbf\xbd\\u0017.\xef\xbf\xbd#\\u001F\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd$f\xef\xbf\xbd*e\xcd\xa5\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd`\xef\xbf\xbd\xef\xbf\xbd-^\xef\xbf\xbd\xef\xbf\xbdaM#\xef\xbf\xbd\xef\xbf\xbdM\xef\xbf\xbd\xef\xbf\xbd:\xef\xbf\xbd+\xef\xbf\xbd:c\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdM\xef\xbf\xbd~|3\xef\xbf\xbd\xef\xbf\xbd\'\xef\xbf\xbd\xef\xbf\xbd<\xef\xbf\xbd4\xef\xbf\xbd\xef\xbf\xbd\xd7\x83<;\xef\xbf\xbd\xef\xbf\xbd28g\xe8\x9c\xa1~\xdf\x9fw\\u0019\xef\xbf\xbdR\xef\xbf\xbds\xef\xbf\xbd|R\\u000F\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd|\xef\xbf\xbdE?SA\\f\xef\xbf\xbd:T\\u001A\xef\xbf\xbd\xef\x96\xbf\xef\xbf\xbd|5\xef\xbf\xbd@M\xef\xbf\xbd|U\xef\xbf\xbdGr\\u0012\xef\xbf\xbd\\u001AO\xef\xbf\xbd\\u001A\xef\xbf\xbdk9\xef\xbf\xbd\\u000E\xef\xbf\xbd\xef\xbf\xbd4>\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd5\xef\xbf\xbdzq[\\f\xef\xbf\xbd\\u001F\xef\xbf\xbd`4\\u0000*\\u000F\xef\xbf\xbd\xef\xbf\xbd]\xef\xbf\xbd\\u001D\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd}\\u0007\xef\xbf\xbd#\\u000B\xef\xbf\xbd\\u0016+^x\xef\xbf\xbd\\u001C\xef\xbf\xbd8\xef\xbf\xbd\xef\xbf\xbdz\\u0005\\u0015\xef\xbf\xbd\xef\xbf\xbd4\xef\xbf\xbd_\\u0010\xef\xbf\xbd\\\\\xef\xbf\xbdFkx\xef\xbf\xbdu;\xef\xbf\xbd\xef\xbf\xbd\x7f\\b\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd`pds\xef\xbf\xbd\xef\xbf\xbd_w\xef\xbf\xbd\xef\xbf\xbdYU]\xef\xbf\xbd\\u001D\\u000F\xef\xbf\xbd\xef\xbf\xbd \xef\xbf\xbd\'V\xef\xbf\xbd\xef\xbf\xbd\\u0007]p\\f\xef\xbf\xbdy\xef\xbf\xbd\xef\xbf\xbd\\u000EL\\u0005>\xef\xbf\xbd\xef\xbf\xbd[\xc9\x9coy\xef\xbf\xbd\\u000EC].m\xd7\x81\\u000E\xef\xbf\xbd\\u0006C\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdPf\\u001B\\u0001\xef\xbf\xbd\xef\xbf\xbd$\xef\xbf\xbd\xef\xbf\xbdYFB\\bNJ\xef\xbf\xbd%B\\u0001B\\u0001\\u0012\\"=\xef\xbf\xbd\xef\xbf\xbd\xe3\xba\xb236\xef\xbf\xbdC\xef\xbf\xbdG\xef\xbf\xbd\xef\xbf\xbd\\u0010\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdh)TGH!@@\xef\xbf\xbd\xef\xbf\xbd?\xef\xbf\xbd\\u0016!\\u0015A#\xef\xbf\xbd2\xef\xbf\xbd\xef\xbf\xbd \xef\xbf\xbd7\xef\xbf\xbd\xef\xbf\xbd\\u0012M\xef\xbf\xbdI[iJ\xef\xbf\xbd\xef\xbf\xbd0\xef\xbf\xbd\xef\xbf\xbd6(\xef\xbf\xbdd\\\\(C\xef\xbf\xbdBk\xef\xbf\xbdn\xef\xbf\xbdl\\u0011!\xef\xbf\xbdX\xef\xbf\xbd\'\xef\xbf\xbd\xc3\x895\x7fb\xef\xbf\xbd\xef\xbf\xbdY6\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd<\\u0019\\u0017\\u0019\xef\xbf\xbd\xef\xbf\xbd#D\xef\xbf\xbd\\u0010C\xef\xbf\xbd\xef\xbf\xbds\xef\xbf\xbdx\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd2\xef\xbf\xbd\xef\xbf\xbd4%W\\u0014:A\xef\xbf\xbd\xc2\xa5F\xef\xbf\xbd\\u001C\\u0004)\xef\xbf\xbd\xef\xbf\xbdYF\'\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdH(\xef\xbf\xbdH\\b\\u0017\xe9\xa4\xad\\u0010\\u001A\xef\xbf\xbd|\\u0014\xef\xbf\xbdoR\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdM\\u0014\\u0004QDl\\u0007\xef\xbf\xbd\\"\xef\xbf\xbd\\b\xef\xbf\xbd\\u0011\\u0010n\xef\xbf\xbd\\u0013\\u0010a\\u000B\\u0015\\u0012q!\\u0014@1\xef\xbf\xbdw\xef\xbf\xbd\xef\xbf\xbd}\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd3\xef\xbf\xbd\\u000EPK\\u0007\\b~j\\u0011\xef\xbf\xbd%\\u0003\\u0000\\u00005\\u0015\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0014\\u0000\\u0000\\u0000xl/sharedStrings.xmlm\xef\xbf\xbd\xef\xbf\xbdj\xef\xbf\xbd@\\u0014\xef\xbf\xbd_e\xef\xbf\xbd}3&\xef\xbf\xbdP\xef\xbf\xbd\\u001A\xef\xbf\xbdZ\\"$*^\\u001A\xef\xbf\xbd\\u0014\xef\xbf\xbdFAg\xef\xbf\xbd3\xef\xbf\xbdv\xdf\x96.\xef\xbf\xbd\\u001E\xef\xbf\xbdl\xef\xbf\xbd\xef\xbf\xbdMF\xef\xbf\xbd2\xef\xbf\xbd\xef\xbf\xbdM\\u0019\xef\xbf\xbd<\xef\xbf\xbd\x7f9\\u001C\xef\xbf\xbd\xef\xbf\xbdzmj\xef\xbf\xbd\xef\xbf\xbd;VQb\xef\xbf\xbd\xef\xbf\xbdL\xef\xbf\xbd\\u0000\xef\xbf\xbd\xef\xbf\xbd\\u0016\\u0015\xef\xbf\xbd\\u001B0M\xef\xbf\xbdn `<#EVS\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0019\\\\\xef\xbf\xbd:c\\u001C\xef\xbf\xbd$a\\u0006,9oo\\u0011by\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdh\xef\xbf\xbd\xef\xbf\xbdT\xef\xbf\xbdh\xef\xbf\xbdd\\\\\xef\xbf\xbd\xef\xbf\xbd\\u001E\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdY\xef\xbf\xbdJ\xef\xbf\xbdyS\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd-Q\xef\xbf\xbdU\\u0004\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u001Bp\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\'\xef\xbf\xbds\xef\xbf\xbd\xef\xbf\xbd3\xef\xbf\xbd_C\xef\xbf\xbd\xef\xbf\xbd2un\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0018\xef\xbf\xbd\\u0018\xc6\x8f\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd-~\xef\xbf\xbdAG\xef\xbf\xbd\xef\xbf\xbd\xd1\x9f|\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0018\xef\xbf\xbdQ*GUq\\u001D/QY\xef\xbf\xbd\xef\xbf\xbdm<[\xef\xbf\xbd\xef\xbf\xbd\\u001F\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdU\xef\xbf\xbd6x\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdF\'\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdr\xd4\x824\xef\xbf\xbdDw^8\xef\xbf\xbdM\\"+^\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdj\\u0007\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0019\'\xef\xbf\xbd\xef\xbf\xbd\\u0003\xef\xbf\xbd|\xef\xbf\xbd\xef\xbf\xbd\\u000BPK\\u0007\\b\xef\xbf\xbd\\u0004\xef\xbf\xbdS\\t\\u0001\\u0000\\u0000\xef\xbf\xbd\\u0001\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000xl/theme/theme1.xml\xef\xbf\xbd\\u0019Mo\\u001BE\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdN\\u0013\'v\xef\xbf\xbdTu\xef\xbf\xbd\xd8\xb1\\u001Bh\xef\xbf\xbdF\xef\xbf\xbd[\xef\xbf\xbd\xef\xbf\xbdxw\xef\xbf\xbd;\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdjf\xef\xbf\xbd\xef\xbf\xbd7\xef\xbf\xbd\\u001E\xef\xbf\xbd\xef\xbf\xbd\\u0010\\u0005qA\xef\xbf\xbd\xef\xbf\xbd\\u0001\\u0001\xef\xbf\xbdZ\xef\xbf\xbdK\xef\xbf\xbd5\xef\xbf\xbd\\"(R\xef\xbf\xbd\\u0002of\xef\xbf\xbdk\xef\xbf\xbdu\xef\xbf\xbdV\xef\xbf\xbd\xef\xbf\xbd\\u001C\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xde\xbc\xef\xbf\xbd\xd9\xab\xef\xbf\xbdOb\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\'m\xef\xbf\xbdqi\xef\xbf\xbdC$\xef\xbf\xbdy@\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u001D\xef\xbf\xbd?\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdT8\\t0\xef\xbf\xbd\\ti{S\\"\xef\xbf\xbd\xef\xbf\xbd\xd7\xae\xef\xbf\xbd+*\\"1A\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd+\xef\xbf\xbd\xef\xbf\xbdEJ\xef\xbf\xbdWVV\xef\xbf\xbd\\u000F\xef\xbf\xbdX^\xef\xbf\xbd)I\xef\xbf\xbd\xdd\x98\xef\xbf\xbd\\u0018+X\xef\xbf\xbdp%\\u0010\xef\xbf\xbd\\u0018\xef\xbf\xbd\xef\xbf\xbdlemuuc%\xef\xbf\xbd4\xef\xbf\xbdP\xef\xbf\xbdc zg<\xef\xbf\xbd>ACM\xef\xbf\xbd+\xef\xbf\xbd\xef\xbf\xbd\\u0018,\\u0013%\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd@\xef\xbf\xbd&\\u000E\xef\xbf\xbd\xef\xbf\xbd\\u000E\\u001B\xef\xbf\xbdGNe\xef\xbf\xbd\\tt\xef\xbf\xbdY\xdb\x83s\\u0002~<$\'\xef\xbf\xbdC\\fK\\u0005/\xef\xbf\xbd\xde\xaa\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xca\xb5\xef\xbf\xbd+\\u0005\\u0016S\\u000B\xef\xbf\xbd+\xef\xbf\xbd}\xef\xbf\xbd#f\\u0018\xef\xbf\xbd\xef\xbf\xbd9U\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdF\xef\xbf\xbd\xef\xbf\xbduy\xef\xbf\xbd<\xef\xbf\xbd@05\\u000F\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdFI\xef\xbf\xbd@`\xef\xbf\xbd\\u0007i-;U\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdf\xef\xbf\xbdSP\xef\xbf\xbd@\xef\xbf\xbd\xef\xbf\xbdy\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdjs\\u0006\xef\xbf\xbdr\xef\xbf\xbd\xef\xbf\xbd\\u001C\xef\xbf\xbd[\xef\xbf\xbdN\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdc\xef\xbf\xbd\\u001A(\xef\xbf\xbd\xd8\x9cC\xef\xbf\xbd\\\\\xef\xbf\xbdhn\xef\xbf\xbd\xef\xbf\xbd\\b\\u0006\xef\xbf\xbd\\"\xef\xbf\xbd\xef\xbf\xbd\\u0010\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdnw\xef\xbf\xbdE0P\\u0016ac\\u000E\xef\xbf\xbd\x7fyk\xef\xbf\xbd9\xef\xbf\xbd`\xef\xbf\xbd\\"F\xef\xbf\xbd\xef\xbf\xbd9pm\xef\xbf\xbd\xef\xbf\xbdD\\u0005\xcc\x98\xef\xbf\xbd\xef\xbf\xbdZ\xef\xbf\xbdM\xef\xbf\xbd\xef\xbf\xbd,|\xef\xbf\xbd\\u0004\\u0003\xef\xbf\xbd(<M\\u001F2\xef\xbf\xbdZ\xef\xbf\xbdw1~\xef\xbf\xbdE\\u001F\\u00004 \xc3\x8a&HMS2\xef\xbf\xbd>xt\\u0017\xef\xbf\xbd#A\xef\xbf\xbd\xef\xbf\xbd\\u0018_!\xef\xbf\xbd\xef\xbf\xbd*\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd>\\u000EI_\xef\xbf\xbdT\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdR\\f\\u0001R\xef\xbf\xbd|\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdW\xcf\x9f\xef\xbf\xbdW\xcf\x9f\xef\xbf\xbd>|v\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdG\xef\xbf\xbdN\\u001F\xef\xbf\xbd\xef\xbf\xbdQs0wq\\u0012V1_~\xef\xbf\xbd\xef\xbf\xbd_\xef\xbf\xbd|\xef\xbf\xbd\xef\xbf\xbd|\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd_.@\xef\xbf\xbdU\xef\xbf\xbd\xef\xbf\xbd~\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd_\xef\xbf\xbdX\\u0000\\t1U2\xef\xbf\xbd\xef\xbf\xbd\'\xef\xbf\xbd?{\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdq\\u001D\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd*\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdD\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0018\\u001D\xef\xbf\xbdX\xef\xbf\xbdg\xef\xbf\xbd\xef\xbf\xbdrOF\xef\xbf\xbd(\xef\xbf\xbd\\bS\\u0007\\u0005G@\xef\xbf\xbd\xef\xbf\xbdxOE\\u000E\xef\xbf\xbd\xef\xbf\xbd)f\xef\xbf\xbd\xef\xbf\xbd\\u001D\xef\xbf\xbd\xef\xbf\xbd\xf0\x9e\x80\x9cR\\u000Byc\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdw\\u0010\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdC\xef\xbf\xbd%\xef\xbf\xbd\\u0019\xef\xbf\xbd\\u000E\xef\xbf\xbd\\u001E\xef\xbf\xbd\xef\xbf\xbdE\xef\xbf\xbd\\u001An\xef\xbf\xbd\xef\xbf\xbdJM\\u000F\'I\xef\xbf\xbd\xef\xbf\xbd|1\xef\xbf\xbd\\u0002\\u001E`|T{|\\u0017\'\xef\xbf\xbd\xef\xbf\xbd{\xef\xbf\xbd\\u00142j\xe1\xa4\x8e\\u0011\xef\xbf\xbd\\u0011qX\xef\xbf\xbdg8Q8$\\tQH\xef\xbf\xbd\xe3\x87\x84\xd4\x89x\xef\xbf\xbdRG\xef\xbf\xbd{\xef\xbf\xbd\\u0017\\\\\xef\xbf\xbdB\xef\xbf\xbd)\xef\xbf\xbd`Z\xef\xbf\xbd\xef\xbf\xbd!\\u001D9^Ub\xef\xbf\xbd\xef\xbf\xbd\\u0018\\f4\xef\xbf\xbd\\u0015\\u001C\xef\xbf\xbd\xef\xbf\xbdhh\xef\xbf\xbd\\u001E\xef\xbf\xbdpV+\xef\xbf\xbd\\u000E9rA!B0\xef\xbf\xbd\\u0013`H\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u001Bx\xef\xbf\xbdp\\\\Kt\xef\xbf\xbdc QZ\xef\xbf\xbd\\u0016VQ-\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd=\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd!a\\u001C\xef\xbf\xbd\\u0002\\"e-\xef\xbf\xbd\\u001D\xef\xbf\xbd\xef\xbf\xbd.\xef\xbf\xbd\xef\xbf\xbd\xc4\x90\xef\xbf\xbd\xef\xbf\xbd=`\xef\xbf\xbdMc\\u0017T(zXK\xef\xbf\xbd\\u0016\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u000F\xef\xbf\xbd\\u0011\xef\xbf\xbd\xef\xbf\xbdZ\xef\xbf\xbd\\u0001M\xef\xbf\xbd*\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0010<\\u0016\xef\xbf\xbd}\xef\xbf\xbdj\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u001B3z\\u0006\xef\xbf\xbd\xef\xbf\xbdb\xef\xbf\xbd\xdf\xa3\xc4\xb1\xef\xbf\xbd\\u0012\xef\xbf\xbd\xef\xbf\xbd.\\u001D\xef\xbf\xbdJg\xef\xbf\xbdo&\xe0\xb6\xb6\xef\xbf\xbd;\xef\xbf\xbd9\xef\xbf\xbd\xef\xbf\xbdY\xc9\x9aQ\xef\xbf\xbd\xd6\x99;\xef\xbf\xbdO\xef\xbf\xbdy\\u0011\xdb\x86V\\u001B$\xef\xbf\xbd3)z!\xef\xbf\xbd\xef\xbf\xbd41\xef\xbf\xbd\xef\xbf\xbdI\xef\xbf\xbdO\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd$\xef\xbf\xbd\xef\xbf\xbdy\\u0019\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0007\xc9\xbb\xef\xbf\xbd\xef\xbf\xbd\\u0017F\xef\xbf\xbd\xef\xbf\xbd\xd9\xb8L\xef\xbf\xbd\xef\xbf\xbdd\xef\xbf\xbd}\xef\xbf\xbdi\xef\xbf\xbd\xef\xbf\xbdM\xef\xbf\xbd\xef\xbf\xbd26PSFnI\xef\xbf\xbdgK\xef\xbf\xbd\'A\\u001F6\xef\xbf\xbd\xef\xbf\xbdL\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdF\xef\xbf\xbdg\x7f\\u00070\\u0014\xef\xbf\xbd !\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdTE\xef\xbf\xbd\\b\xef\xbf\xbd\xd0\xa47\xef\xbf\xbd\xef\xbf\xbd\\u0018\xca\x8cv(Q\xef\xbf\xbd%\\f\xef\xbf\xbdf\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd~\\u0001\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdcf\xef\xbf\xbd\\u0018(\\u0001\\u001C\xef\xbf\xbd=\\u001E\xef\xbf\xbd\xef\xbf\xbdug\xef\xbf\xbd,\\b\xef\xbf\xbd\xef\xbf\xbd34\xef\xbf\xbdl~\xd4\xba&\xef\xbf\xbd\xef\xbf\xbdq\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd5,cK\xef\xbf\xbd\xef\xbf\xbd0\xef\xbf\xbd\xef\xbf\xbd\\u0014\xef\xbf\xbdW\xef\xbf\xbd\\u0002\xcd\x8bg\xef\xbf\xbd\xef\xbf\xbdt=\\u000B\xef\xbf\xbdV\\u0007t\xef\xbf\xbd\\u0001S\xef\xbf\xbd\xef\xbf\xbd\'}\xef\xbf\xbdH\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0015\xef\xbf\xbd\xef\xbf\xbd:F1o\xef\xbf\xbdR\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd,\\u0011\\u000E\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd_1a\xef\xbf\xbd\xd8\xb0p\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdjLx>\xef\xbf\xbd:.\xef\xbf\xbd\\u0004\\u001F\xef\xbf\xbdA\xef\xbf\xbd\xef\xbf\xbdcI]\\u0017\\u0014J]\xef\xbf\xbd(\xef\xbf\xbd\\t.\xef\xbf\xbdTC\xef\xbf\xbd%\xef\xbf\xbd\xef\xbf\xbdm\xef\xbf\xbd\xef\xbf\xbdZ\\u001E\xef\xbf\xbdq\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd0\xef\xbf\xbd\xef\xbf\xbdc\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd0\\u000B\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdW\xef\xbf\xbdz\xef\xbf\xbdkC\xef\xbf\xbd\xef\xbf\xbd])\xef\xbf\xbd\xef\xbf\xbd\\u0002\xef\xbf\xbdj\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\"\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdN\xef\xbf\xbdT;XF\xd6\x96\xef\xbf\xbdUn1\xef\xbf\xbd\xef\xbf\xbd\xc3\xac\\bk\xef\xbf\xbd\xef\xbf\xbd&\xef\xbf\xbdfd\xef\xbf\xbd|\xef\xbf\xbd\\"|\xef\xbf\xbdo\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd|\xef\xbf\xbd\xef\xbf\xbd]\\u000B\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdj\xef\xbf\xbd\xca\x8e\xd6\x9f]f\xef\xbf\xbd\xef\xbf\xbd\'\xef\xbf\xbd\xef\xbf\xbdA\\u0014\\u001C\xef\xbf\xbd\\u0011\xef\xbf\xbd\xef\xbf\xbd\\u0003\\f^\\u0000z\xef\xbf\xbd\\u0012\\u0005T\xef\xbf\xbd}\xef\xbf\xbd\xef\xbf\xbdo\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd6\xef\xbf\xbdq\xef\xbf\xbdr\\u0013n\xef\xbf\xbd\xea\xaa\xb7[\\u0006\xef\xbf\xbd\xef\xbf\xbdc\xef\xbf\xbdF8\xcb\xa0\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd>\\u000Bob\xef\xbf\xbd`\xc2\xac*\xef\xbf\xbd\\u0015+#N\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdrYYt\xef\xbf\xbd\xef\xbf\xbd)Y\\u001Co~\xef\xbf\xbdd\xef\xbf\xbd\\u0005\\u0002n\xef\xbf\xbd\\u0003m\\u0012\\u001Fn{\\u0005F:n\xef\xbf\xbd\\u001E\\u0017*\xe2\x90\x8f\xd2\x88\xef\xbf\xbd}\\u00017_&\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd-\xef\xbf\xbd\\u0006\xef\xbf\xbd\xc3\x8d\xef\xbf\xbd\xef\xbf\xbd\\u0015\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xda\xb9\xef\xbf\xbd\\u00121\xef\xbf\xbd\xef\xbf\xbd:\xef\xbf\xbd!\\u0012\\u0014*\xef\xbf\xbd\xef\xbf\xbd\\u0004!\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0007\xef\xbf\xbd\xef\xbf\xbdZ#\xef\xbf\xbdF\xef\xbf\xbdfN\xef\xbf\xbdxU\xef\xbf\xbda\xef\xbf\xbdZ\xef\xbf\xbdG\xe4\x88\xb0\xef\xbf\xbd\xce\x87\\u001B:#{(\\u0002\x7f\xef\xbf\xbdi\xef\xbf\xbd\\u0012\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdN\xef\xbf\xbd3\xef\xbf\xbd\\u001B\xef\xbf\xbd\xef\xbf\xbd\\u0015\xef\xbf\xbd\xef\xbf\xbd65YL\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd<U\xef\xbf\xbdlj,\\u0005\xef\xbf\xbd_\xd7\xa0\xef\xbf\xbd\\u0017e\\u000F\xd5\xac\\u0016\xef\xbf\xbdJm\xef\xbf\xbd\xef\xbf\xbd\\u0013\xef\xbf\xbdE\xef\xbf\xbdX\xef\xbf\xbd.W\xef\xbf\xbdQ\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd^k-.F\xef\xbf\xbd\xef\xbf\xbd\\u0003\\u0013\\u0017\xef\xbf\xbdN\\u0017@H\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdH\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\f]e\xef\xbf\xbd\xef\xbf\xbd\\u00002-\xef\xbf\xbdO\\u0013Y=\\u0007\\u0007\xef\xbf\xbd@\xef\xbf\xbd8\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\b\xef\xbf\xbd\xef\xbf\xbdl\xef\xbf\xbdz\xef\xbf\xbd\xef\xbf\xbde\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\"\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\"\xef\xbf\xbd\\u0007\xef\xbf\xbd\xef\xbf\xbd\xee\xb2\xa2\xef\xbf\xbd\xef\xbf\xbdr\\u000Ft#\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd|\\u001A\xef\xbf\xbdt\xef\xbf\xbd(<\xef\xbf\xbd[\xef\xbf\xbdo\xef\xbf\xbd\xef\xbf\xbdl\xef\xbf\xbd\xef\xbf\xbdV1\xef\xbf\xbd\\u0018\xef\xbf\xbdOa\xd5\xafU|\xef\xbf\xbd\\u0000\xcc\xbd\\u0003\xef\xbf\xbd\\u0002&\xef\xbf\xbd~\xef\xbf\xbd\xef\xbf\xbd)\xef\xbf\xbdLH\xef\xbf\xbd\xef\xbf\xbd\xc2\xb6\xef\xbf\xbd#\\u001EL\xef\xbf\xbdg&m\\u0019\xef\xbf\xbd\\u001A\xd4\xbc\xef\xbf\xbd\xef\xbf\xbd\xe4\x80\x8c\\u0011N\xef\xbf\xbdYe&\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdAe\xef\xbf\xbd\\u0003\xef\xbf\xbd\xef\xbf\xbd\\u0010\xef\xbf\xbdr\\u0005\xef\xbf\xbdz\xef\xbf\xbd|1\xef\xbf\xbd\xef\xbf\xbd!h\\\\[S\\u000B\xef\xbf\xbd%\xef\xbf\xbd\\u000B\\u0014s6d\xef\xbf\xbd\\u0002\xef\xbf\xbd\\\\\xef\xbf\xbd\xef\xbf\xbdQ\xef\xbf\xbd\xef\xbf\xbdh9\xef\xbf\xbd\\u0019\xef\xbf\xbdM\xef\xbf\xbdVr\xef\xbf\xbd\xef\xbf\xbds\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u001Fjn\\u0019\\t\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd4W;\xef\xbf\xbd-\xef\xbf\xbd9;]\xef\xbf\xbdm\xef\xbf\xbd\\u000BhN\xef\xbf\xbd\xef\xbf\xbdFs\xef\xbf\xbd\xef\xbf\xbd@\xef\xbf\xbd\xef\xbf\xbdn\\b_D\\u0005\xef\xbf\xbd)y`\\u00123\\u0014\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u001A\\u000F\xef\xbf\xbd\xef\xbf\xbd7PK\\u0007\\b\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0012\xef\xbf\xbd\\u0006\\u0000\\u0000\\u001E\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u001A\\u0000\\u0000\\u0000xl/_rels/workbook.xml.rels\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdj\xef\xbf\xbd0\\u0010\xef\xbf\xbd_E\xec\xbd\x96\xef\xbf\xbd\xef\xbf\xbdRJ\xef\xbf\xbd\\\\J!\xef\xbf\xbd6}\\u0000!\xef\xbf\xbd\x7f\xef\xbf\xbd-\\t\xef\xbf\xbd\xdf\xbeK\\u0002\xef\xbf\xbd\\u0003!\xef\xbf\xbd\xef\xbf\xbd8\xef\xbf\xbdh\xef\xbf\xbdc\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xd0\xab/\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd`\xef\xbf\xbd*JP\\u0018\\\\\xef\xbf\xbd]h\\f|\\u001E\xef\xbf\xbd\\u001E\xef\xbf\xbdA\\u0011\xef\xbf\xbd\xef\xbf\xbdm\\u001F\\u0003\\u001A\\u0018\xef\xbf\xbd`\xef\xbf\xbd\xdd\xbccoY\xef\xbf\xbdP\xef\xbf\xbd%R\xef\xbf\xbd\\u0011\xef\xbf\xbd@\xcb\x9c^\xef\xbf\xbd&\xef\xbf\xbd\xef\xbf\xbd`\xef\xbf\xbd\xef\xbf\xbd\\t\xef\xbf\xbdL\xef\xbf\xbd\\u0007\xef\xbf\xbd\\"s\xef\xbf\xbd\xef\xbf\xbduG\xdb\xa0^\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\f\xef\xbf\xbd\xef\xbf\xbdT{o \xef\xbf\xbd}\\u0005\xef\xbf\xbd0&\xef\xbf\xbd\xef\xbf\xbd?;\xef\xbf\xbdu\xef\xbf\xbd\xef\xbf\xbd5\xef\xbf\xbd\xd3\x80\xef\xbf\xbdoTh\\u0016.\xef\xbf\xbd@\xef\xbf\xbd\\u001Bd\\u0003gy1\xef\xbf\xbdB@A\xef\xbf\xbd\xef\xbf\xbd\\u0010\xef\xbf\xbd%!\xef\xbf\xbdc>R\xef\xbf\xbd\xef\xbf\xbd\x7f \xef\xbf\xbdE\xef\xbf\xbd<\xef\xbf\xbdO\xef\xbf\xbd^\xef\xbf\xbd\xef\xbf\xbdx\xef\xbf\xbd\xef\xbf\xbdG\xef\xbf\xbd\xef\xbf\xbd\\\\\xef\xbf\xbd\xef\xbf\xbdm<.\xef\xbf\xbd\xef\xbf\xbd\xda\x8c\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u001CcnO4\xef\xbf\xbd\xef\xbf\xbd\xea\xb6\xbfPK\\u0007\\b\xef\xbf\xbdP\xef\xbf\xbdp\xef\xbf\xbd\\u0000\\u0000\\u0000\xef\xbf\xbd\\u0002\\u0000\\u0000PK\\u0003\\u0004\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000[Content_Types].xml\xef\xbf\xbdT\xef\xbf\xbdn\xef\xbf\xbd \\u0010\xef\xbf\xbd\\u0015\xef\xbf\xbdkeHz\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdv\\u000E}\\u001C\xef\xbf\xbdHM?\xef\xbf\xbd\xef\xbf\xbd:F\xef\xbf\xbd\xef\xbf\xbdX\xef\xbf\xbd&\x7f\xdf\xb5\xdd\xa4\\u000F5\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0002BhgfgX\xef\xbf\xbd\xd9\xb6\xef\xbf\xbd\xef\xbf\xbd\\u0006\\"\\u001A\xef\xbf\xbdJ6\xef\xbf\xbd\\u0013\xef\xbf\xbd\xef\xbf\xbdS^\\u001B\xef\xbf\xbd,\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd)\xef\xbf\xbde\\u0019&\xe9\xb4\xb4\xef\xbf\xbdA\xef\xbf\xbdv\xef\xbf\xbdlV\\u0015\xef\xbf\xbd]\\u0000\xcc\xa8\xef\xbf\xbda\xc9\x9a\xef\xbf\xbd\xc2\x9d\\u0010\xef\xbf\xbd\\u001Ah%r\\u001F\xef\xbf\xbd\xef\xbf\xbdM\xef\xbf\xbdc+\\u0013\\u001D\xef\xbf\xbdR\\u0004\xef\xbf\xbdVr\\t\xef\xbf\xbdz2\xef\xbf\xbd\\u0011\xca\xbb\\u0004.\xef\xbf\xbd\xef\xbf\xbd`U\xef\xbf\xbdB\xef\xbf\xbd\xef\xbf\xbdh\xef\xbf\xbd\xef\xbf\xbd2\xef\xbf\xbdg\xef\xbf\xbd\\u0012\xef\xbf\xbd\xef\xbf\xbdZ\xef\xbf\xbd\\b\xef\xbf\xbdu\xef\xbf\xbd\\t\xef\xbf\xbde\xef\xbf\xbdCa\xef\xbf\xbd]2\\u0019\xef\xbf\xbd5J&\xef\xbf\xbd-6N\xef\xbf\xbda\xef\xbf\xbd}]\\u001B\\u0005\xda\xabuK\\\\\xef\xbf\xbd\\u0007\xef\xbf\xbd\xef\xbf\xbdQDU<@-\xef\xbf\xbd6e\xef\xbf\xbd[\\u00122t\\u001E\xef\xbf\xbd\xef\xbf\xbdi\\f_=q\xef\xbf\xbd\xef\xbf\xbdU`c\\u0002\xef\xbf\xbdQ\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdv\xef\xbf\xbdL;\\u000Bx\xef\xbf\xbd\\u000F\\u0018\\"H\xef\xbf\xbd@j-\\u001F@\\u000F\xef\xbf\xbd\xef\xbf\xbdP\x7f\xef\xbf\xbd\xef\xbf\xbdz\xef\xbf\xbd~ui\xef\xbf\xbdN\\u0004o\xef\xbf\xbdq\xef\xbf\xbd\\u0002(\xef\xbf\xbdy\xef\xbf\xbd\\u0001\\u0005\\u0005~\xef\xbf\xbd\\u0002\xef\xbf\xbd\\u0002\xd7\xa0\xef\xbf\xbd@\xef\xbf\xbd\\u0010\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdF\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbdB\xef\xbf\xbdo\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0019t\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd.\xef\xbf\xbd<`##\xef\xbf\xbd\xef\xbf\xbd\\u0014i4/\xef\xbf\xbd\\u0010~b\xef\xbf\xbd9\xc4\xa1|\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u000FMW\xef\xbf\xbd_\\b\xef\xbf\xbd\xef\xbf\xbdX\xef\xbf\xbdOPK\\u0007\\bK\xef\xbf\xbdA8V\\u0001\\u0000\\u0000\xef\xbf\xbd\\u0004\\u0000\\u0000PK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdPd\xef\xbf\xbd\xef\xbf\xbd(\xef\xbf\xbd\\u0000\\u0000\\u0000M\\u0002\\u0000\\u0000\\u000B\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000_rels/.relsPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\xc3\x9d\x7fv\\u001E\\u0001\\u0000\\u0000\xef\xbf\xbd\\u0001\\u0000\\u0000\\u0011\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\"\\u0001\\u0000\\u0000docProps/core.xmlPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdPKPUX\xef\xbf\xbd\\u0000\\u0000\\u0000_\\u0001\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\x7f\\u0002\\u0000\\u0000docProps/app.xmlPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\xef\xbf\xbd\\u0013_\xef\xbf\xbdD\\u0001\\u0000\\u0000\\u001C\\u0002\\u0000\\u0000\\u000F\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\xef\xbf\xbd\\u0003\\u0000\\u0000xl/workbook.xmlPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\xef\xbf\xbd\xef\xbf\xbd;\xef\xbf\xbd/\\u0003\\u0000\\u0000!\\f\\u0000\\u0000\\u0018\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0011\\u0005\\u0000\\u0000xl/worksheets/sheet1.xmlPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP~j\\u0011\xef\xbf\xbd%\\u0003\\u0000\\u00005\\u0015\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\xef\xbf\xbd\\b\\u0000\\u0000xl/styles.xmlPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\xef\xbf\xbd\\u0004\xef\xbf\xbdS\\t\\u0001\\u0000\\u0000\xef\xbf\xbd\\u0001\\u0000\\u0000\\u0014\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\xef\xbf\xbd\\u000B\\u0000\\u0000xl/sharedStrings.xmlPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\\u0012\xef\xbf\xbd\\u0006\\u0000\\u0000\\u001E\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u00001\\u0000\\u0000xl/theme/theme1.xmlPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdP\xef\xbf\xbdP\xef\xbf\xbdp\xef\xbf\xbd\\u0000\\u0000\\u0000\xef\xbf\xbd\\u0002\\u0000\\u0000\\u001A\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000C\\u0014\\u0000\\u0000xl/_rels/workbook.xml.relsPK\\u0001\\u0002\\u0014\\u0000\\u0014\\u0000\\b\\b\\b\\u0000\xef\xbf\xbd]\xef\xbf\xbdPK\xef\xbf\xbdA8V\\u0001\\u0000\\u0000\xef\xbf\xbd\\u0004\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000q\\u0015\\u0000\\u0000[Content_Types].xmlPK\\u0005\\u0006\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\xef\xbf\xbd\\u0002\\u0000\\u0000\\b\\u0017\\u0000\\u0000\\u0000\\u0000'
        if data == data2:
            print("Yes")
        else:
            print("No")
        data3 = str(data2, encoding="utf-8")
        # data = json.loads(data)
        # data = data.replace('{"hasError":false,"messageId":0,"referenceNumber":"78600954","errorCode":0,"count":0,"ott":"dbd15e53ac2828cb","result":{"result":"','').replace('","header":{"server":"Pod Web Server","Server":"nginx","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH","Connection":"keep-alive","Date":"Mon, 20 Apr 2020 11:44:25 GMT","Access-Control-Allow-Headers":"origin, content-type, accept, authorization, token","X-Frame-Options":"DENY","Access-Control-Allow-Credentials":"true","Content-Disposition":"attachment; filename=PodReport715-131-20200420-114425.xlsx","Content-Length":"6558","X-XSS-Protection":"1; mode=block","Content-Type":"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"},"statusCode":200}}', '')
        with open("/tmp/715", "wb") as f:
            # f.write(data["result"]["result"])
            f.write(data)
        return True
        kwargs["forceSave"] = force_save
        kwargs["callbackUrl"] = callback_url
        kwargs["user_report_id"] = user_report_id
        kwargs["id"] = user_report_id
        kwargs["execute_params"] = execute_params
        kwargs["page"] = page
        kwargs["size"] = size
        result = self.__execute_user_report(url="getXLS", schema_name="getExcelUserReport", is_stream=True, **kwargs)

        if save_to is None:
            return result
        result = self._request.last_response().content
        print(result)
        # d = io.StringIO(result)

        with open(save_to, "w") as f:
            f.write(result)

        return True

    def get_csv(self, user_report_id, page=0, size=10, callback_url=None, force_save=False, execute_params=None,
                save_to=None, **kwargs):
        """
        دریافت خروجی csv گزارش

        :param int user_report_id: شماره گزارش کاربر
        :param int page: شماره صفحه
        :param int size: تعداد رکورد برگشتی
        :param str callback_url: آدرس کال بک، این آدرس پس از ایجاد خروجی فراخوانی می شود
        :param bool force_save: آیا خروجی حتما در پاد اسپیس ذخیره شود؟
        :param dict execute_params: اطلاعات لازم برای اجرای گزارش
        :param str save_to: آدرس محل ذخیره سازی خروجی
        :return: dict
        """
        kwargs["forceSave"] = force_save
        kwargs["callbackUrl"] = callback_url
        kwargs["user_report_id"] = user_report_id
        kwargs["id"] = user_report_id
        kwargs["execute_params"] = execute_params
        kwargs["page"] = page
        kwargs["size"] = size
        result = self.__execute_user_report(url="getCSV", schema_name="getCSVUserReport", is_stream=True, **kwargs)

        if save_to is None:
            return result
        data = self._request.last_response().content
        print(data)
        print(result)
        # d = io.StringIO(result)

        with open(save_to, "w") as f:
            f.write(result)

        return True

    def __execute_user_report(self, url, schema_name, execute_params=None, is_stream=False, **kwargs):
        """
        مشاهده گزارش کاربر با شناسه

        :param str url: آدرس سرویس
        :param str schema_name: نام اسکیما اعتبارسنجی
        :param dict execute_params: اطلاعات لازم برای اجرای گزارش
        :param bool is_stream: آیا خروجی به صورت استریم است؟
        :return: dict
        """
        if execute_params is None:
            execute_params = self.__default_params()

        self._validate(kwargs, schema_name=schema_name)

        kwargs["content"] = json.dumps(execute_params)

        return self.__parse_response(
            self._request.call(super(PodDashboard, self)._get_sc_product_settings("/v1/userreport/{userReportId}/"+url,
                                                                                  method_type="post"),
                               params=kwargs, headers=self._get_headers(), internal=False, **kwargs),
            is_stream=is_stream)

    @staticmethod
    def __default_params():
        return {
            "filterVOS": [],
            "parentParams": [],
            "orderByElementVOS": [],
        }

    def get_user_report_hash(self, user_report_id, **kwargs):
        """
        دریافت هش گزارش کاربر

        :param int user_report_id: شماره گزارش کاربر
        :return: str
        """
        kwargs["id"] = user_report_id

        self._validate({"user_report_id": user_report_id}, "getUserReportHash")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/userreport/{id}/hash"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def get_public_user_report(self, user_report_id, user_report_hash, **kwargs):
        """
        مشاهده گزارش عمومی (مشاهده گزارش با هش)

        :param int user_report_id: شماره گزارش کاربر
        :param str user_report_hash: هش گزارش
        :return: dict
        """
        kwargs["id"] = user_report_id
        kwargs["hash"] = user_report_hash

        self._validate({"user_report_id": user_report_id, "hash": user_report_hash}, "getPublicUserReport")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/userreport/{id}/publicGet"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def public_execute(self, user_report_id, user_report_hash, page=0, size=10, load_from_cache=False,
                       execute_params=None, **kwargs):
        """
        اجرای گزارش عمومی (اجرای گزارش با هش)

        :param int user_report_id: شماره گزارش کاربر
        :param str user_report_hash: هش گزارش
        :param int page: شماره صفحه
        :param int size: تعداد رکورد در هر خروجی
        :param bool load_from_cache: آیا خروجی از کش لود شود؟
        :param dict execute_params: پارامترهای لازم برای اجرای گزارش
        :return: dict
        """
        kwargs["user_report_id"] = user_report_id
        kwargs["hash"] = user_report_hash
        kwargs["page"] = page
        kwargs["size"] = size
        kwargs["load_from_cache"] = load_from_cache
        kwargs["execute_params"] = execute_params

        self._validate(kwargs, "publicExecute")

        if execute_params is None:
            execute_params = self.__default_params()

        data = {
            "userReportId": user_report_id,
            "hash": user_report_hash,
            "page": page,
            "size": size,
            "loadFromCache": load_from_cache,
            "content": json.dumps(execute_params)
        }
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/userreport/{userReportId}/publicExec"),
            params=data, headers=self._get_headers(), internal=False, **kwargs))

    def remove_user_report(self, user_report_id, **kwargs):
        """
        حذف گزارش کاربر

        :param int user_report_id: شماره گزارش کاربر
        :return: int
        """
        kwargs["id"] = user_report_id

        self._validate({"user_report_id": user_report_id}, "removeUserReport")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/userreport/{id}", method_type="delete"),
            params=kwargs, headers=self._get_headers(), internal=False, **kwargs))

    def share_dashboard(self, dashboard_id, identity, expire, edit_access_level, share_access_level, **kwargs):
        """
        اشتراک گذاری داشبورد

        :param int dashboard_id: شماره داشبورد
        :param str|list identity: نام کاربری، ایمیل و یا تلفن همراه کاربرانی که داشبورد با آن ها به اشتراک گذاشته می شود
        :param str expire: تاریخ اتمام اشتراک گذاری
        :param str edit_access_level: سطح دسترسی برای ویرایش داشبورد
        :param str share_access_level: سطح دسترسی برای اشتراک گذاری
        :return: dict
        """
        kwargs["dashboard_id"] = dashboard_id
        kwargs["identity"] = identity
        kwargs["expire"] = expire
        kwargs["edit_access_level"] = edit_access_level
        kwargs["share_access_level"] = share_access_level

        self._validate(kwargs, "shareDashboard")
        data = {
            "id": dashboard_id,
            "identity": identity,
            "editAccessLevel": edit_access_level,
            "shareAccessLevel": share_access_level,
            "expire": expire
        }
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard/{dashboardId}/share"), params=data,
            headers=self._get_headers(), internal=False, **kwargs))

    def get_dashboard_users(self, dashboard_id, **kwargs):
        """
        مشاهده افرادی که داشبورد با آن ها اشتراک گذاری شده

        :param int dashboard_id: شماره داشبورد
        :return: dict
        """
        kwargs["id"] = dashboard_id

        self._validate({"dashboard_id": dashboard_id}, "getDashboardUsers")

        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard/{id}/users"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def remove_shared_dashboard(self, shared_id, **kwargs):
        """
        لغو اشتراک گذاری داشبورد

        :param int shared_id: شناسه اشتراک
        :return: dict
        """
        kwargs["id"] = shared_id
        self._validate(kwargs, "removeSharedDashboard")
        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard/shared/{id}", method_type="delete"),
            params=kwargs, headers=self._get_headers(), internal=False, **kwargs))

    def get_shared_dashboards(self, page=0, size=10, **kwargs):
        """
        مشاهده داشبوردهای به اشتراک گذاشته شده با کاربر

        :param int page: شماره صفحه
        :param int size: تعداد رکورد در هر صفحه
        :return: dict
        """
        kwargs["page"] = page
        kwargs["size"] = size

        self._validate(kwargs, "getSharedDashboards")

        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard/shared"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def update_shared_dashboard(self, dashboard_id, config, order=None, **kwargs):
        """
        تغییر داشبورد اشتراک گذاری شده با کاربر

        :param int dashboard_id: شناسه داشبورد
        :param dict config: تنظیمات داشبورد
        :param int order: مکان قرارگیری میان لیست داشبوردها
        :return: int
        """

        self._validate({
            "dashboard_id": dashboard_id,
            "config": config,
            "order": order
        }, "updateSharedDashboard")

        data = {
            "id": dashboard_id,
            "content": json.dumps({
                "config": config,
                "order": order
            })
        }

        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/dashboard/shared/{id}", method_type="put"),
            params=data, headers=self._get_headers(), internal=False, **kwargs))

    def add_user_collaborator(self, report_id, identity, **kwargs):
        """
        مشاهده داشبوردهای به اشتراک گذاشته شده با کاربر

        :param int report_id: شناسه گزارش
        :param str identity: نام کاربری، ایمیل و یا تلفن همراه کاربرانی که داشبورد با آن ها به اشتراک گذاشته می شود
        :return: dict
        """
        kwargs["id"] = report_id
        kwargs["identity"] = identity

        self._validate({"report_id": report_id, "identity": identity}, "addUserCollaborator")

        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/report/{id}/addUser"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def get_user_collaborators(self, report_id, **kwargs):
        """
        مشاهده افرادی که به یک گزارش دسترسی دارند

        :param int report_id: شناسه گزارش

        :return: dict
        """
        kwargs["id"] = report_id

        self._validate({"report_id": report_id}, "getUserCollaborators")

        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/report/{id}/users"), params=kwargs,
            headers=self._get_headers(), internal=False, **kwargs))

    def remove_collaborator(self, report_id, user_id, **kwargs):
        """
        لغو دسترسی کاربر به یک گزارش

        :param int report_id: شناسه گزارش
        :param int user_id: شناسه کاربر
        :return: int
        """
        kwargs["id"] = report_id
        kwargs["userId"] = user_id

        self._validate({
            "report_id": report_id,
            "user_id": user_id
        }, "removeCollaborator")

        return self.__parse_response(self._request.call(
            super(PodDashboard, self)._get_sc_product_settings("/v1/report/{id}/removeUser", method_type="delete"),
            params=kwargs, headers=self._get_headers(), internal=False, **kwargs))

    @staticmethod
    def __convert_list_to_str(items, index, delimiter=","):
        if index in items:
            items[index] = [str(val) for val in items[index]]
            return delimiter.join(items[index])
        return ""

    @staticmethod
    def __remove_empty_items(items):
        return {key: value for key, value in items.items() if value != "" and value is not None and value != {}}

    def raw_response(self):
        """
        جواب دریافتی از سرور داشبورد

        :return: dict
        """
        return self.__raw_response

    def __parse_response(self, raw_response, is_stream=False):
        if is_stream:
            self.__raw_response = {
                "content": raw_response,
                "is_stream": True
            }

            return raw_response

        self.__raw_response = json.loads(raw_response)
        if "code" in self.__raw_response:
            if self.__raw_response["code"] == 200:
                # return self.__raw_response["result"]
                result = json.dumps(self.__raw_response["result"], indent=2, ensure_ascii=False)
                return result.replace("false", "False").replace("true", "True").replace("null", "None")

        data = self.__raw_response
        data["reference_number"] = self._request._reference_number
        data["error_code"] = self._request.error_code

        raise DashboardException(**data)
